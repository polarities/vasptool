from collections import UserDict

class INCAR(UserDict):
    def set_tag(self, tag, value):
        if self.values(tag) is False:
            raise ValueError(f"Key '{tag}' is not valid INCAR keyword.")
        self.update({tag:value})

    def save_incar(self, path):
        docpath = os.path.join(path, "INCAR")
        for k in range(self.keys()):
            if self.values(k) is False:
                raise ValueError(f"Key '{k}' is not valid INCAR keyword. Revise your input.")

        with open(docpath, 'w') as file:
            file.write(f"general:\n")
            for key, value in self.items():
                if type(value) == bool:
                    if value is True:
                        value = 'T'
                    elif value is False:
                        value = 'F'
                    else:
                        raise ValueError("Boolean looks weird. I quit!")
                if type(value) != str:
                    value = str(value)
                file.write(f"{key} = {value}\n")

    def __setitem__(self, key, value):
        if self.validate(key) is False:
            raise ValueError(f"Key '{key}' is not valid INCAR keyword.")

        super(INCAR, self).__setitem__(key, value)

    def validate(self, key):
        valid_list = [
            'ADDGRID',
            'AEXX',
            'AGGAC',
            'AGGAX',
            'ALDAC',
            'ALGO',
            'AMIN',
            'AMIX',
            'AMIX_MAG',
            'ANDERSEN_PROB',
            'ANTIRES',
            'APACO',
            'BMIX',
            'BMIX_MAG',
            'BPARAM',
            'CH_LSPEC',
            'CH_NEDOS',
            'CH_SIGMA',
            'CLL',
            'CLN',
            'CLNT',
            'CLZ',
            'CMBJ',
            'CMBJA',
            'CMBJB',
            'CPARAM',
            'CSHIFT',
            'CUTOFF_MU',
            'CUTOFF_SIGMA',
            'CUTOFF_TYPE',
            'DEPER',
            'DIMER_DIST',
            'DIPOL',
            'DQ',
            'EBREAK',
            'EDIFF',
            'EDIFFG',
            'EFIELD',
            'EFIELD_PEAD',
            'EINT',
            'EMAX',
            'EMIN',
            'ENAUG',
            'ENCUT',
            'ENCUTFOCK',
            'ENCUTGW',
            'ENCUTGWSOFT',
            'ENINI',
            'EPSILON',
            'ESTOP',
            'EVENONLY',
            'EVENONLYGW',
            'FERDO',
            'FERWE',
            'FINDIFF',
            'FOCKCORR',
            'GGA',
            'GGA_COMPAT',
            'HFALPHA',
            'HFLMAX',
            'HFRCUT',
            'HFSCREEN',
            'HILLS_BIN',
            'HILLS_H',
            'HILLS_W',
            'HITOLER',
            'I_CONSTRAINED_M',
            'IALGO',
            'IALL_IN_ONE',
            'IBAND',
            'IBRION',
            'ICHARG',
            'ICHIBARE',
            'ICORELEVEL',
            'IDIPOL',
            'IEPSILON',
            'IGPAR',
            'IMAGES',
            'IMIX',
            'INCREM',
            'INIMIX',
            'INIWAV',
            'IPEAD',
            'ISIF',
            'ISMEAR',
            'ISPIN',
            'ISTART',
            'ISYM',
            'IVDW',
            'IWAVPR',
            'KBLOCK',
            'KGAMMA',
            'KPAR',
            'KPOINT_BSE',
            'KPOINTS_OPT_NKBATCH',
            'KPUSE',
            'KSPACING',
            'LADDER',
            'LAECHG',
            'LALL_IN_ONE',
            'LAMBDA',
            'LANGEVIN_GAMMA',
            'LANGEVIN_GAMMA_L',
            'LASPH',
            'LASYNC',
            'LATTICE_CONSTRAINTS',
            'LBERRY',
            'LBLUEOUT',
            'LBONE',
            'LCALCEPS',
            'LCALCPOL',
            'LCHARG',
            'LCHARGH5',
            'LCHIMAG',
            'LCORR',
            'LDAU',
            'LDAUJ',
            'LDAUL',
            'LDAUPRINT',
            'LDAUTYPE',
            'LDAUU',
            'LDIAG',
            'LDIPOL',
            'LDISENTANGLE',
            'LEFG',
            'LELF',
            'LEPSILON',
            'LFINITE_TEMPERATURE',
            'LFOCKACE',
            'LFOCKAEDFT',
            'LFXC',
            'LH5',
            'LHARTREE',
            'LHFCALC',
            'LHYPERFINE',
            'LIBXC1',
            'LIBXC1_Pn',
            'LIBXC2',
            'LIBXC2_Pn',
            'LKPOINTS_OPT',
            'LKPOINTS_WAN',
            'LKPROJ',
            'LLRAUG',
            'LMAXFOCK',
            'LMAXFOCKAE',
            'LMAXMIX',
            'LMAXPAW',
            'LMAXTAU',
            'LMIXTAU',
            'LMODELHF',
            'LMONO',
            'LMP2LT',
            'LNABLA',
            'LNMR_SYM_RED',
            'LNONCOLLINEAR',
            'LOCPROJ',
            'LOPTICS',
            'LORBIT',
            'LORBMOM',
            'LPARD',
            'LPEAD',
            'LPHON_DISPERSION',
            'LPHON_POLAR',
            'LPHON_READ_FORCE_CONSTANTS',
            'LPLANE',
            'LREAL',
            'LRPA',
            'LRPAFORCE',
            'LSCAAWARE',
            'LSCALAPACK',
            'LSCALER0',
            'LSCALU',
            'LSCDM',
            'LSCK',
            'LSCSGRAD',
            'LSELFENERGY',
            'LSEPB',
            'LSEPK',
            'LSMP2LT',
            'LSORBIT',
            'LSPECTRAL',
            'LSPECTRALGW',
            'LSPIRAL',
            'LSUBROT',
            'LTBOUNDLIBXC',
            'LTEMPER',
            'LTHOMAS',
            'LTRIPLET',
            'LUSE_VDW',
            'LUSENCCL',
            'LVDW_EWALD',
            'LVDW_ONECELL',
            'LVDWEXPANSION',
            'LVDWSCS',
            'LVHAR',
            'LVTOT',
            'LWANNIER90',
            'LWANNIER90_RUN',
            'LWAVE',
            'LWAVEH5',
        ]
        if key in valid_list:
            return True
        else:
            return False
